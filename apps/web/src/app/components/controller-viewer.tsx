"use client";
import React, { FC } from "react";
import { useBoundStore, skipRole } from "../store";
import { Box, Button } from "@repo/ui";
import { Flex } from "@repo/ui";

interface ControllerViewerProps {}
export const ControllerViewer: FC<ControllerViewerProps> = () => {
  const { gameState, isRoundComp, currentPlayer } = useBoundStore();

  return (
    <Box className="w-full">
      <Flex gap="3" className="w-full" justify="center">
        {gameState === "inputPhase" && <StartGameButton />}
        {gameState === "orderPhase" &&
          (isRoundComp ? <StartSugorokuButton /> : <NextButtonOnOrder />)}
        {gameState === "sugorokuPhase" &&
          (isRoundComp ? (
            <NextRoundButton />
          ) : (
            <Flex gap="6" className="w-full" justify="center">
              <NextButtonOnPlay />
              {!currentPlayer?.usedSkip && <SkipButton />}
            </Flex>
          ))}
      </Flex>
    </Box>
  );
};

const StartGameButton = () => {
  const { setGameState, setMessage, players, setCurrentPlayer } =
    useBoundStore();
  return (
    <Button
      className="w-32 md:w-48 lg:w-80"
      size="3"
      onClick={() => {
        if (players.length < 2)
          return alert("„Éó„É¨„Ç§„É§„Éº„Çí2‰∫∫‰ª•‰∏äÁôªÈå≤„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
        setGameState("orderPhase");
        setCurrentPlayer(players[0]);
        setMessage({
          texts: [
            "„Éó„É¨„Ç§„É§„ÉºÈ†Ü„ÇíÊ±∫„ÇÅ„Åæ„Åô„ÄÇ",
            `„ÅäÂ•Ω„Åç„Å™„Ç´„Éº„Éâ„ÇíÈÅ∏„Çì„Åß„ÄåÊ±∫ÂÆö„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ`,
          ],
          to: players[0],
        });
      }}
    >
      „Ç≤„Éº„É†„Çπ„Çø„Éº„Éà!
    </Button>
  );
};
const StartSugorokuButton = () => {
  const {
    setGameState,
    shuffleTrumps,
    nextPlayer,
    sortPlayers,
    allClose,
    setMessage,
  } = useBoundStore();
  return (
    <Button
      className="w-32 md:w-48 lg:w-80"
      size="3"
      onClick={async () => {
        console.log("sortPlayers");
        allClose();
        setGameState("sugorokuPhase");
        await sortPlayers();
        const player = nextPlayer();
        shuffleTrumps();
        setMessage({
          texts: [
            `„Ç´„Éº„Éâ„ÇíÈÅ∏Êäû„Åó„Äå„Ç´„Éº„ÉâÁ¢∫ÂÆö„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`,
            "Ë®òËºâ„ÅÆÊï∞Â≠ó„Å†„Åë„Ç≥„Éû„ÇíÈÄ≤„ÇÅ„Åæ„Åô„ÄÇ",
          ],
          to: player,
        });
      }}
    >
      „Åô„Åî„Çç„Åè„Çπ„Çø„Éº„Éà!
    </Button>
  );
};

const NextButtonOnOrder = () => {
  const {
    setSelectedTrump,
    isLastPlayer,
    currentPlayer,
    selectedTrump,
    nextPlayer,
    clearSelectedTrump,
    flipTrump,
    setMessage,
  } = useBoundStore();
  return (
    <Button
      className="w-32 md:w-48 lg:w-80"
      size="3"
      onClick={() => {
        if (!currentPlayer) return;
        if (!selectedTrump) return alert("„ÅäÂ•Ω„Åç„Å™„Ç´„Éº„Éâ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ");
        // „Å≤„Å£„Åè„ÇäËøî„Åó„Å¶
        flipTrump(selectedTrump);
        // „Éó„É¨„Ç§„É§„Éº„Å´„Ç´„Éº„Éâ„ÅÆÊï∞Â≠ó„Çí„Çª„ÉÉ„ÉàÔºàÈ†ÜÁï™„ÇíÊ±∫„ÇÅ„ÇãÔºâ
        setSelectedTrump(currentPlayer, selectedTrump?.value);
        clearSelectedTrump();
        if (!isLastPlayer) {
          // ÊúÄÂæå„ÅÆ„Éó„É¨„Éº„É§„Éº„Åò„ÇÉ„Å™„ÅÑ„Å™„ÇâÊ¨°„ÅÆ„Éó„É¨„Éº„É§„Éº„Å∏
          const player = nextPlayer();
          setMessage({
            texts: [
              "„Éó„É¨„Ç§„É§„ÉºÈ†Ü„ÇíÊ±∫„ÇÅ„Åæ„Åô„ÄÇ",
              `„ÅäÂ•Ω„Åç„Å™„Ç´„Éº„Éâ„ÇíÈÅ∏„Çì„Åß„ÄåÊ±∫ÂÆö„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ`,
            ],
            to: player,
          });
        } else {
          setMessage({
            texts: [
              "Êï∞Â≠ó„ÅÆÂ§ß„Åç„ÅÑÈ†Ü„Å´„Éó„É¨„Ç§„É§„Éº„Çí‰∏¶„Å≥Êõø„Åà„ÄÅ„Åô„Åî„Çç„Åè„Ç≤„Éº„É†„ÇíÈñãÂßã„Åó„Åæ„Åô„ÄÇ",
              "„Äå„Åô„Åî„Çç„Åè„Çπ„Çø„Éº„Éà!„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
            ],
            to: null,
          });
        }
      }}
    >
      Ê±∫ÂÆö
    </Button>
  );
};

const NextButtonOnPlay = () => {
  const {
    selectedTrump,
    setSelectedTrump,
    isLastPlayer,
    currentPlayer,
    movePlayer,
    nextPlayer,
    clearSelectedTrump,
    flipTrump,
    assignRole,
    getNewRole,
    setMessage,
  } = useBoundStore();
  return (
    <Button
      className="w-32 md:w-48 lg:w-80"
      size="3"
      onClick={() => {
        if (!currentPlayer) return;
        if (!selectedTrump) return alert("„ÅäÂ•Ω„Åç„Å™„Ç´„Éº„Éâ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ");
        // „Å≤„Å£„Åè„ÇäËøî„Åó„Å¶
        flipTrump(selectedTrump);
        // „Éó„É¨„Ç§„É§„Éº„Å´„Ç´„Éº„Éâ„ÅÆÊï∞Â≠ó„Çí„Çª„ÉÉ„ÉàÔºà„Çª„ÉÉ„Éà„Åô„ÇãÊÑèÂë≥„ÅØÁâπ„Å´„Å™„ÅÑ„Åå„ÄÅ„É¶„Éº„Ç∂„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅÆÁ¢∫ÂÆö„ÇíÊÑèÂë≥„Åô„ÇãÔºâ
        setSelectedTrump(currentPlayer, selectedTrump?.value);
        // „Ç´„Éº„Éâ„ÅÆÊï∞Â≠óÂàÜÈÄ≤„ÇÅ„Çã
        const newPlayer = movePlayer(currentPlayer, selectedTrump.value);
        // ÈÄ≤„ÇÅ„ÅüÂÖà„ÅÆ„Éû„Çπ„ÅÆÂΩπÂâ≤„Çí„Çª„ÉÉ„Éà„Åô„ÇãÔºàÁ¢∫ÂÆö„ÅØ„Åó„Å¶„ÅÑ„Å™„ÅÑÔºâ
        const newRole = getNewRole(newPlayer);
        assignRole(newPlayer, newRole);
        if (!isLastPlayer) {
          // ÊúÄÂæå„ÅÆ„Éó„É¨„Éº„É§„Éº„ÅÆ„Å®„Åç„ÅØ„ÄÅÁµêÊûú„ÇíÁú∫„ÇÅ„Çâ„Çå„Çã„Çà„ÅÜ„ÄÅÊ¨°„ÅÆ„Éó„É¨„Éº„É§„Éº„Å´„ÅØÁßªÂãï„Åó„Å™„ÅÑ
          const player = nextPlayer();
          setMessage({
            texts: [
              `‰ªªÊÑè„ÅÆ„Ç´„Éº„Éâ„ÇíÈÅ∏Êäû„Åó„Äå„Ç´„Éº„ÉâÁ¢∫ÂÆö„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`,
              "„Ç´„Éº„Éâ„ÇíÁ¢∫Ë™ç„Åó„Ç≥„Éû„ÇíÈÄ≤„ÇÅ„Åæ„Åô„ÄÇ",
            ],
            to: player,
          });
        } else {
          setMessage({
            texts: [
              "üêç ‰∏ÄÂ∑°„Åó„Åæ„Åó„ÅüÔºÅ",
              "„ÄåÊ¨°„ÅÆ„É©„Ç¶„É≥„Éâ„Å∏„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
            ],
            to: null,
          });
        }
        clearSelectedTrump();
      }}
      disabled={selectedTrump ? false : true}
    >
      „Ç´„Éº„ÉâÁ¢∫ÂÆö
    </Button>
  );
};

const SkipButton = () => {
  const {
    nextPlayer,
    useSkip,
    isLastPlayer,
    clearSelectedTrump,
    assignRole,
    currentPlayer,
  } = useBoundStore();
  return (
    <Button
      className="w-32 md:w-48 lg:w-80"
      size="3"
      onClick={() => {
        if (!currentPlayer) return;
        const newPlayer = useSkip(currentPlayer);
        assignRole(newPlayer, skipRole);
        if (!isLastPlayer) {
          // ÊúÄÂæå„ÅÆ„Éó„É¨„Éº„É§„Éº„ÅÆ„Å®„Åç„ÅØ„ÄÅÁµêÊûú„ÇíÁú∫„ÇÅ„Çâ„Çå„Çã„Çà„ÅÜ„ÄÅÊ¨°„ÅÆ„Éó„É¨„Éº„É§„Éº„Å´„ÅØÁßªÂãï„Åó„Å™„ÅÑ
          nextPlayer();
        }
        clearSelectedTrump();
      }}
    >
      „Çπ„Ç≠„ÉÉ„Éó ( 1Âõû„Å†„Åëüë∫ )
    </Button>
  );
};

const NextRoundButton = () => {
  const {
    roles,
    nextPlayer,
    allClose,
    checkPlayersAndFixRole,
    setGameState,
    shuffleTrumps,
    setMessage,
  } = useBoundStore();
  return (
    <Button
      className="w-32 md:w-48 lg:w-80"
      size="3"
      onClick={() => {
        const finish = checkPlayersAndFixRole();
        console.log("roles", roles);
        if (finish) {
          setGameState("gameCompletionPhase");
          setMessage({
            texts: [`üíØ ÂÖ®Âì°„ÅÆÂΩπËÅ∑„ÅåÁ¢∫ÂÆö„Åó„Åæ„Åó„ÅüÔºÅ`, `„Åä„Å§„Åã„Çå„Åï„Åæ„Åß„Åó„ÅüÔºÅ`],
            to: null,
          });
          return;
        } else {
          const player = nextPlayer();
          allClose();
          shuffleTrumps();
          setMessage({
            texts: [
              `„ÅäÂ•Ω„Åç„Å™„Ç´„Éº„Éâ„ÇíÈÅ∏„Çì„Åß„Äå„Ç´„Éº„ÉâÁ¢∫ÂÆö„Äç„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`,
              "„Ç´„Éº„Éâ„ÇíÁ¢∫Ë™ç„Åó„Ç≥„Éû„ÇíÈÄ≤„ÇÅ„Åæ„Åô„ÄÇ",
            ],
            to: player,
          });
          return;
        }
      }}
    >
      Ê¨°„ÅÆ„É©„Ç¶„É≥„Éâ„Å∏
    </Button>
  );
};
